#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Script for upgrading programs installed via brew cask.

Brew is a package manager widely used in Mac OS for installing command
line programs easily. Brew-cask is a plugin for brew which allows to
install graphical programs.
This script is a wrapper that allows easily updating all programs installed
via brew-cask.
The script is tested in Python 2.7/3.4-3.6.
"""
from __future__ import unicode_literals

import argparse
import os
import shlex
import subprocess
import sys

__version__ = '0.1.0'
__author__ = 'Pavel Goltsev'

PY2 = sys.version_info.major == 2
"""Python version."""

if PY2:
    str_type = unicode
else:
    str_type = str


class OutputFormatter(object):
    """Formatter for output to console."""

    CODE = '\033' if PY2 else '\x1b'
    """Symbol for coloured output."""
    PREFIX = '==> '
    """Prefix for output message."""

    def __init__(self, add_newline, add_prefix):
        # type: (bool, bool) -> None
        """Initialize an instance.

        :param add_newline: If True then new line will be added at the end
        of every message. This behavior can be overrode per-message.
        :param add_prefix: If True then a prefix will be added at
        the beginning of every message. This behavior can be overrode
        per-message.
        """
        super(OutputFormatter, self).__init__()

        self._add_newline_default = add_newline
        self._add_prefix_default = add_prefix

    def __call__(self, message, add_newline=None, add_prefix=None):
        # type: (str | unicode, bool, bool) -> None
        """Print a message to the standard output.

        :param message: Message to be printed.
        :param add_newline: Whether add new line at the and of the message
        or not. If not defined the default value will be used.
        :param add_prefix: Whether add prefix at the beginning of the message
        or not. If not defined the default value will be used.
        """
        if add_newline is None:
            add_newline = self._add_newline_default
        if add_prefix is None:
            add_prefix = self._add_prefix_default

        msg = '{code}[1m{msg}{newline}'.format(
            msg=message, code=self.CODE,
            newline='\n' if add_newline else '',
        )

        if add_prefix:
            msg = '{code}[1;92m{prefix}{code}[0m{msg}'.format(
                msg=msg, code=self.CODE, prefix=self.PREFIX,
            )

        sys.stdout.write(msg)


out = OutputFormatter(add_newline=True, add_prefix=True)
"""Output handler."""


class Program(object):
    """Class represents a program.

    It provides methods for getting information about the program and
    to control its upgrade process.
    """

    def __new__(cls, name, info=None):
        # type: (str | unicode, list) -> object
        """Create an instance.

        It searches for appropriate class in subclasses and if it finds
        a subclass with 'NAME' property that is equal to a program name
        then an instance will be created using this subclass.
        :param name: Program name.
        :param name: Information about the program.
        """

        for subclass in cls.__subclasses__():
            if getattr(subclass, 'NAME') == name:
                cls = subclass
                break

        return object.__new__(cls)

    def __init__(self, name, info=None):
        # type: (str | unicode, list) -> None
        """Initialize an instance.

        :param name: Name of a program.
        :param info: Information about the program.
        """
        super(Program, self).__init__()

        self._name = name
        self._info = info
        self._update_versions()

    def _update_versions(self):
        # type: () -> None
        """Update versions of the program.

        It gets remote and installed versions of the program and stores them
        in instance's variables.
        """
        out('%s ... ' % self._name, add_newline=False)

        info = self._get_program_info(self._name)
        self._repo_version = self._get_repo_version(info)
        self._installed_version = self._get_installed_version(info)

        out(self._installed_version or 'not installed', add_prefix=False)

    def _get_program_info(self, name):
        # type: (str | unicode) -> list[str | unicode]
        """Get info about given program.

        :param name: Program name.
        :return: List of strings with information about the program.
        """
        return self._info or run('brew cask info %s' % name, False).split('\n')

    @classmethod
    def _get_repo_version(cls, program_info):
        # type: (str | unicode) -> str | unicode | None
        """Get a version of the program that is available in repository.

        :param program_info: Info about the program.
        :return: Version as string.
        """
        # e.g. program_info[0] == 'keepassx: 2.0.3'
        try:
            version_string = program_info[0]
        except IndexError:
            return None

        try:
            _, version = version_string.split(':', 1)
        except ValueError:
            # if the version string doesn't contain colon
            # an attempt to assign split result to a tuple will cause
            # 'too many values to unpack' ValueError exception
            return None

        return version.strip()

    @classmethod
    def _get_installed_version(cls, program_info):
        # type: (list) -> str | unicode | None
        """Get currently installed version of a program.

        :param program_info: Info about the program.
        :return: Version as string or None if program is not installed.
        """
        # e.g. program_info[2] == '/usr/local/Caskroom/keepassx/2.0.2 (217B)'
        # or 'Not installed' if program is not installed
        try:
            version_string = program_info[2]
        except IndexError:
            return None

        if version_string.lower() == 'not installed':
            return None

        return os.path.basename(version_string.split(' ')[0])

    @property
    def is_upgrade_available(self):
        # type: () -> bool
        """Allow to determine whether new version is available.

        :return: True if new version is available, False otherwise.
        """
        return self.installed_version and \
            self.repo_version != self.installed_version

    @property
    def repo_version(self):
        # type: () -> bool
        """Get a version that is currently available in repository.

        :return: Version as string.
        """
        return self._repo_version

    @property
    def installed_version(self):
        # type: () -> str | unicode
        """Get a version that is currently installed.

        :return: Version as string.
        """
        return self._installed_version

    @property
    def is_installed(self):
        # type: () -> bool
        """Get status of the program.

        :return: True if program is installed, False otherwise.
        """
        return bool(self._installed_version)

    def upgrade(self):
        # type: () -> None
        """Perform upgrade of the program.

        It uninstalls the program first and then installs new version from
        repository if available.
        """
        out('Upgrading {name}: '
            '{local_version} -> '
            '{repo_version} ...'.format(name=self._name,
                                        local_version=self._installed_version,
                                        repo_version=self._repo_version))
        self.uninstall()
        self.install()

    def uninstall(self):
        # type: () -> None
        """Uninstall the program."""
        run('brew cask uninstall %s' % self._name)

    def install(self):
        # type: () -> None
        """Install the program."""
        run('brew cask install %s' % self._name)


class Tunnelblick(Program):
    """Tunnelblick program."""

    NAME = 'tunnelblick'
    """Name of tunnelblick program."""

    def uninstall(self):
        """Uninstall the program.

        It sets the current user as the owner of an application before
        uninstalls it. It is necessary, because tunnelblick application
        is owned by root.
        """
        import getpass

        current_username = getpass.getuser()
        run('sudo chown -R {username} '
            '/Applications/Tunnelblick.app'.format(username=current_username))

        super(Tunnelblick, self).uninstall()


def run(command, print_out=True):
    # type: (str | unicode, bool) -> str | unicode
    """Run given command as subprocess.

    If the process is failed the function exits with the exit code of the
    process and prints to output an error message.
    :param command: Command as string to be run.
    :param print_out: Whether print to output or not. Default is True.
    :return: Output of executed command.
    """
    return_code = 0
    output = ''

    if print_out:
        return_code = subprocess.call(shlex.split(command))
    else:
        try:
            output = subprocess.check_output(shlex.split(command))
        except subprocess.CalledProcessError as exc:
            output = exc.output
            return_code = exc.returncode
            print_out = True

        if not isinstance(output, str_type):
            output = output.decode('utf-8')

        if output and print_out:
            out(output, add_prefix=False, add_newline=False)

    if return_code:
        exit(return_code)

    return output


def get_programs():
    # type: () -> list[str | unicode]
    """Get installed programs.

    :return: List of installed program names.
    """
    return run('brew cask list', False).strip().split('\n')


def get_programs_info(program_names):
    # type: (list) -> dict[str, list]
    """Get information on given program names.

    :param program_names: Names of programs to get information on.
    :return: Dictionary containing the name of a program and related
    information {program_name: information_string_lines}.
    """
    lines = run('brew cask info %s' % ' '.join(program_names),
                False).split('\n')
    programs = {}
    info_lines = None
    for line in lines:
        possible_program_name = line.split(':')[0]
        if possible_program_name in program_names:
            program_name = possible_program_name
            if program_name not in programs:
                programs[program_name] = []
            info_lines = programs[program_name]

        info_lines.append(line)

    return programs


def cleanup():
    # type: () -> None
    """Perform brew cask cleanup."""
    out('Performing cleanup ...')

    run('brew cask cleanup')


def update():
    # type: () -> None
    """Perform brew cask update."""
    out('Updating program list ...')

    run('brew update')


def get_options():
    # type: () -> argparse.Namespace
    """Get command line arguments.

    :return: Dictionary with options passed as command line arguments.
    """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        'program',
        help='program to check and update if necessary',
        type=str,
        nargs='?',
    )
    parser.add_argument(
        '-c', '--cleanup',
        help='perform cleanup once upgrade is complete',
        action='store_true',
        default=False
    )
    parser.add_argument(
        '-u', '--update',
        help='perform brew update before upgrade',
        action='store_true',
        default=False
    )
    parser.add_argument(
        '-f', '--force-upgrade',
        help='force upgrade even no upgrade is needed',
        action='store_true',
        default=False
    )
    return parser.parse_args()


def main():
    """Execute script."""
    options = get_options()

    if getattr(options, 'update'):
        update()

    program_name = getattr(options, 'program')
    program_names = (program_name,) if program_name else get_programs()
    programs_info = get_programs_info(program_names)
    for program_name in program_names:
        program = Program(program_name, programs_info[program_name])
        if program.is_installed and \
                (getattr(options, 'force_upgrade') or
                 program.is_upgrade_available):
            program.upgrade()

    if getattr(options, 'cleanup'):
        cleanup()


if __name__ == '__main__':
    main()
