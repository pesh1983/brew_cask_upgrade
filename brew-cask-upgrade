#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import argparse
import shlex
import subprocess
import sys

import os


class HooksHandler(object):
    hooks = {}

    def noop(self, *args, **kwargs):
        pass

    default_hooks = (noop, noop)

    def __init__(self, program_name):
        super(HooksHandler, self).__init__()
        self._program_name = program_name

    def get_hook(self):
        return self.hooks.get(self._program_name, self.default_hooks)

    def run_pre_hook(self):
        sys.stdout.write('Running pre hook ...\n')
        self.get_hook()[0](self, self._program_name)

    def run_post_hook(self):
        sys.stdout.write('Running post hook ...\n')
        self.get_hook()[1](self, self._program_name)


class InstallHooksHandler(HooksHandler):
    hooks = {}


class UninstallHooksHandler(HooksHandler):
    def pre_uninstall_tunnelblick(self, *args, **kwargs):
        import getpass
        current_username = getpass.getuser()
        run(
            'sudo chown -R {username} /Applications/Tunnelblick.app'.format(
                username=current_username
            ),
            write_to_stdout=True
        )

    hooks = {
        'tunnelblick': (pre_uninstall_tunnelblick, HooksHandler.noop)
    }


def check_and_upgrade_program(program_name):
    sys.stdout.write('%s ... ' % program_name)
    program_info = get_brew_program_info(program_name)

    current_version = get_new_version(program_info)
    if current_version is None:
        sys.stdout.write('not installed\n')
        return

    new_version = get_current_version(program_info)
    sys.stdout.write('{}\n'.format(new_version))

    if current_version != new_version:
        upgrade_program(current_version=current_version,
                        new_version=new_version,
                        program_name=program_name)


def get_brew_program_info(program_name):
    stdoutdata = run('brew cask info %s' % program_name)
    return stdoutdata.split('\n')


def get_current_version(program_info):
    # e.g. program_info[0] == 'keepassx: 2.0.3'
    program_name, version = program_info[0].split(':', 1)
    return version.strip()


def get_new_version(program_info):
    # e.g. program_info[2] == '/usr/local/Caskroom/keepassx/2.0.2 (217B)'
    # or 'Not installed' if program is not installed
    if program_info[2] == 'Not installed':
        return None
    return os.path.basename(program_info[2].split(' ')[0])


def upgrade_program(current_version, new_version, program_name):
    sys.stdout.write('Upgrading {program_name}: '
                     '{current_version} -> {new_version} ...\n'.format(
        program_name=program_name,
        current_version=current_version,
        new_version=new_version,
    ))
    uninstall_program(program_name)
    install_program(program_name)
    sys.stdout.write('Done.\n')


def uninstall_program(program_name):
    sys.stdout.write('Uninstalling old version ...\n')

    hook = UninstallHooksHandler(program_name)
    hook.run_pre_hook()

    run('brew cask uninstall %s' % program_name, write_to_stdout=True)

    hook.run_post_hook()


def install_program(program_name):
    sys.stdout.write('Installing new version ...\n')

    hook = InstallHooksHandler(program_name)
    hook.run_pre_hook()

    run('brew cask install %s' % program_name, write_to_stdout=True)

    hook.run_post_hook()


def get_brew_program_list():
    stdoutdata = run('brew cask list')
    return stdoutdata.strip().split('\n')


def run(command, write_to_stdout=False):
    process = subprocess.Popen(
        shlex.split(command),
        stderr=subprocess.STDOUT,
        stdout=subprocess.PIPE,
    )
    stdoutdata = process.communicate()[0] or ''
    stdoutdata = stdoutdata.decode('utf-8')

    if stdoutdata:
        if write_to_stdout or process.returncode != 0:
            sys.stdout.write(stdoutdata)

    if process.returncode != 0:
        exit(process.returncode)

    return stdoutdata


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="""Check versions and upgrade brew cask programs.
If there is a new version of a program, the old one will be completely
uninstalled before proceeding with installation. Notice that programs
which don't have version (such as 'latest') will never be upgraded.
Usually such programs upgrade by themselves."""
    )
    parser.add_argument(
        'program',
        help='program to check and update if necessary',
        type=str,
        nargs='?',
    )
    parser.add_argument(
        '-c', '--cleanup',
        help='perform cleanup once upgrade is complete',
        action='store_true',
        default=False
    )
    parser.add_argument(
        '-u', '--update',
        help='perform brew update before upgrade',
        action='store_true',
        default=False
    )
    args = parser.parse_args()

    if args.update:
        sys.stdout.write('Updating program list ...\n')
        run('brew update', write_to_stdout=True)

    programs_to_upgrade = [args.program] \
        if args.program \
        else get_brew_program_list()
    for program_name in programs_to_upgrade:
        check_and_upgrade_program(program_name)

    if args.cleanup:
        sys.stdout.write('Performing cleanup ...\n')
        run('brew cask cleanup', write_to_stdout=True)
