#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import argparse
import os
import shlex
import subprocess
import sys

noop = lambda *args, **kwargs: None


def pre_install_tunnelblick(*args, **kwargs):
    import getpass
    current_username = getpass.getuser()
    run(
        'sudo chown -R {username} /Applications/Tunnelblick.app'.format(
            username=current_username
        ),
        write_to_stdout=True
    )


install_hooks = {
    'tunnelblick': (pre_install_tunnelblick, noop)
}


def check_and_upgrade_program(program_name):
    sys.stdout.write('%s ... ' % program_name)
    program_info = get_brew_program_info(program_name)
    current_version = get_current_version(program_info)
    new_version = get_new_version(program_info)
    sys.stdout.write('{}\n'.format(new_version))
    if current_version != new_version:
        sys.stdout.write('Upgrading {program_name}: '
                         '{cur_ver} -> {new_ver} ...\n'.format(
            program_name=program_name,
            cur_ver=current_version,
            new_ver=new_version,
        ))
        upgrade_program(program_name)
        sys.stdout.write('Done.\n')


def get_brew_program_info(program_name):
    stdoutdata = run('brew cask info %s' % program_name)
    return stdoutdata.split('\n')


def get_current_version(program_info):
    # e.g. program_info[0] == 'keepassx: 2.0.3'
    program_name, version = program_info[0].split(':')
    return version.strip()


def get_new_version(program_info):
    # e.g. program_info[2] == '/usr/local/Caskroom/keepassx/2.0.2 (217B)'
    return os.path.basename(program_info[2].split(' ')[0])


def upgrade_program(program_name):
    run_pre_install_hook(program_name)

    sys.stdout.write('Uninstalling an old version ...\n')
    run('brew cask uninstall %s' % program_name, write_to_stdout=True)

    sys.stdout.write('Installing a new version ...\n')
    run('brew cask install %s' % program_name, write_to_stdout=True)

    run_post_install_hook(program_name)


def run_pre_install_hook(program_name):
    get_install_hook(program_name)[0](program_name)


def run_post_install_hook(program_name):
    get_install_hook(program_name)[1](program_name)


def get_install_hook(program_name):
    return install_hooks.get(program_name, (noop, noop))


def get_brew_program_list():
    stdoutdata = run('brew cask list')
    return stdoutdata.strip().split('\n')


def run(command, write_to_stdout=False):
    process = subprocess.Popen(
        shlex.split(command),
        stderr=subprocess.STDOUT,
        stdout=subprocess.PIPE,
    )
    stdoutdata = process.communicate()[0] or ''
    stdoutdata = stdoutdata.decode('utf-8')

    if stdoutdata:
        if write_to_stdout or process.returncode != 0:
            sys.stdout.write(stdoutdata)

    if process.returncode != 0:
        exit(process.returncode)

    return stdoutdata


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="""Check versions and upgrade brew cask programs.
If there is a new version of a program, the old one will be completely
uninstalled before proceeding with installation. Notice that programs
which don't have version (such as 'latest') will never be upgraded.
Usually such programs upgrade by themselves."""
    )
    parser.add_argument(
        'program',
        help='program to check and update if necessary.',
        type=str,
        nargs='?',
    )
    args = parser.parse_args()

    if args.program:
        check_and_upgrade_program(args.program)
    else:
        program_name_list = get_brew_program_list()
        for program_name in program_name_list:
            check_and_upgrade_program(program_name)
